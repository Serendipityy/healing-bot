import logging
import os
from typing import Optional

import google.generativeai as genai
from dotenv import load_dotenv

from ragbase.config import Config

load_dotenv()

class QueryTransformationHyDE:
    def __init__(self):
        """
        Initialize the QueryTransformation class with Gemini model.

        :param api_key: Your Gemini API key.
        """
        api_key =  os.getenv("GOOGLE_API_KEY")
        if not api_key:
            raise ValueError("‚ö†Ô∏è Gemini API key is missing. Please set GEMINI_API_KEY in your .env file.")

        genai.configure(api_key=api_key)
        self.model = model = genai.GenerativeModel("gemini-2.0-flash")

    def transform_query(self, query: str) -> str:
        """
        Generates a hypothetical document from the user's query using Gemini.
        This output is used for embedding or retrieval tasks.

        :param query: User's input question or query.
        :return: Hypothetical document string.
        """
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n t√¢m l√Ω v√† s·ª©c kh·ªèe tinh th·∫ßn.

        H√£y tr·∫£ l·ªùi c√¢u truy v·∫•n sau m·ªôt c√°ch t·ª± nhi√™n, ch√¢n th√†nh, s√¢u s·∫Øc v√† ƒë·∫ßy c·∫£m th√¥ng:

        üîé Truy v·∫•n t·ª´ ng∆∞·ªùi d√πng:
        "{query}"

        ƒêo·∫°n vƒÉn n√™n th·ªÉ hi·ªán s·ª± th·∫•u hi·ªÉu c·∫£m x√∫c, g·ª£i m·ªü h∆∞·ªõng nh√¨n t√≠ch c·ª±c, v√† mang l·∫°i c·∫£m gi√°c ƒë∆∞·ª£c l·∫Øng nghe v√† ch·ªØa l√†nh. 
        **Tr·∫£ l·ªùi b·∫±ng b·∫±ng ti·∫øng Vi·ªát**.
        """

        try:
            response = self.model.generate_content(prompt)
            generated_response = response.text.strip()
            return f"C√¢u h·ªèi: {query}\nC√¢u tr·∫£ l·ªùi tham kh·∫£o: {generated_response}"
            return response.text.strip()
        except Exception as e:
            logging.error(f"‚ùå Failed to generate hypothetical document: {e}")
            raise RuntimeError("‚ö†Ô∏è Gemini failed to generate hypothetical document.")