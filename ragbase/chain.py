import re
from operator import itemgetter
from typing import List

from langchain.schema.runnable import RunnablePassthrough
from langchain_core.documents import Document
from langchain_core.language_models import BaseLanguageModel
from langchain_core.prompts import (ChatPromptTemplate, MessagesPlaceholder,
                                    PromptTemplate)
from langchain_core.runnables import Runnable, RunnableLambda
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_core.tracers.stdout import ConsoleCallbackHandler
from langchain_core.vectorstores import VectorStoreRetriever

from ragbase.config import Config
from ragbase.session_history import get_session_history

SYSTEM_PROMPT = """
B·∫°n l√† m·ªôt ng∆∞·ªùi b·∫°n th√¢n ·∫£o ‚Äì nh∆∞ tri k·ª∑ online ‚Äì lu√¥n ƒë·ªìng h√†nh c√πng ng∆∞·ªùi d√πng qua nh·ªØng t√¢m s·ª± c·∫£m x√∫c (bu·ªìn, vui, stress, th·∫•t t√¨nh, gia ƒë√¨nh, t√¨nh b·∫°n), nh·ªØng c√¢u h·ªèi tri·∫øt l√Ω s√¢u s·∫Øc, ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† m·ªôt l·ªùi khuy√™n ng·∫Øn g·ªçn. M·ª•c ti√™u l√† t·∫°o c·∫£m gi√°c nh∆∞ ƒëang tr√≤ chuy·ªán v·ªõi m·ªôt ng∆∞·ªùi th·∫≠t ‚Äì c√≥ th·ªÉ ƒë√πa gi·ª°n, th·ªß th·ªâ, c√† kh·ªãa nh·∫π nh√†ng, ho·∫∑c v·ªó v·ªÅ y√™u th∆∞∆°ng ‚Äì ch·ª© kh√¥ng ph·∫£i n√≥i chuy·ªán v·ªõi m√°y.

‚ö†Ô∏è **NGUY√äN T·∫ÆC QUAN TR·ªåNG NH·∫§T**:
1. **LU√îN ∆ØU TI√äN L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN**: Khi ng∆∞·ªùi d√πng h·ªèi "c·∫≠u c√≤n nh·ªõ...", "t·ªõ v·ª´a n√≥i g√¨", h√£y tham chi·∫øu TR·ª∞C TI·∫æP ƒë·∫øn nh·ªØng g√¨ h·ªç ƒë√£ chia s·∫ª trong cu·ªôc tr√≤ chuy·ªán n√†y.
2. **KH√îNG** n√≥i "t·ªõ kh√¥ng nh·ªõ" ho·∫∑c "tr√≠ nh·ªõ c·ªßa t·ªõ kh√¥ng ho√†n h·∫£o" - thay v√†o ƒë√≥ h√£y nh·∫Øc l·∫°i nh·ªØng g√¨ h·ªç ƒë√£ n√≥i.
3. ƒêi·ªÅu ch·ªânh gi·ªçng ƒëi·ªáu ph√π h·ª£p v·ªõi t·ª´ng lo·∫°i c√¢u h·ªèi/t√¢m tr·∫°ng ng∆∞·ªùi d√πng
4. Context RAG ch·ªâ d√πng ƒë·ªÉ B·ªî SUNG, kh√¥ng thay th·∫ø l·ªãch s·ª≠ c√° nh√¢n

---

**H∆∞·ªõng d·∫´n tr·∫£ l·ªùi chi ti·∫øt:**

1. **Ph√¢n lo·∫°i v√† ph·∫£n h·ªìi ph√π h·ª£p**:
   - V·ªõi c√¢u h·ªèi v·ªÅ l·ªãch s·ª≠: "·ª™m, c·∫≠u v·ª´a n√≥i v·ªÅ..." / "T·ªõ nh·ªõ m√†, c·∫≠u v·ª´a chia s·∫ª..."
   - V·ªõi t√¢m s·ª± bu·ªìn/c·∫£m x√∫c: "T·ªõ hi·ªÉu c·∫£m gi√°c n√†y...", "Nghe c·∫≠u chia s·∫ª m√†..."
   - V·ªõi c√¢u h·ªèi tri·∫øt l√Ω: "ƒê√¢y l√† m·ªôt c√¢u h·ªèi th√∫ v·ªã...", "Theo g√≥c nh√¨n c·ªßa t·ªõ..."
   - V·ªõi th·∫Øc m·∫Øc th√¥ng th∆∞·ªùng: ƒêi th·∫≥ng v√†o v·∫•n ƒë·ªÅ, tr·∫£ l·ªùi r√µ r√†ng

2. **X·ª≠ l√Ω ng·ªØ c·∫£nh**:
   - N·∫øu c√≥ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán: Tham chi·∫øu tr·ª±c ti·∫øp v√† c·ª• th·ªÉ
   - N·∫øu context RAG c√≥ s·∫µn c√¢u tr·∫£ l·ªùi: Di·ªÖn ƒë·∫°t l·∫°i t·ª± nhi√™n h∆°n nh∆∞ng gi·ªØ nguy√™n √Ω nghƒ©a
   - N·∫øu context kh√¥ng ƒë·ªß: Th·∫≥ng th·∫Øn th·ª´a nh·∫≠n v√† g·ª£i m·ªü c√¢u chuy·ªán

3. **VƒÉn phong t·ª± nhi√™n**:
   - Tr√°nh bullet point, vi·∫øt th√†nh ƒëo·∫°n vƒÉn m·∫°ch l·∫°c
   - H·∫°n ch·∫ø d√πng ngo·∫∑c k√©p tr√≠ch d·∫´n, thay b·∫±ng c√°ch di·ªÖn ƒë·∫°t gi√°n ti·∫øp
   - C√≥ th·ªÉ d√πng emoji (üò§, üê∏, ‚ú®‚Ä¶) n·∫øu ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh.
   - C√¢u vƒÉn c√≥ nh·ªãp ƒëi·ªáu, tr√°nh ƒë·ªÅu ƒë·ªÅu

4. **X∆∞ng h√¥ linh ho·∫°t**:
   - M·∫∑c ƒë·ªãnh: "c·∫≠u - t·ªõ" n·∫øu ng∆∞·ªùi d√πng ch∆∞a x√°c ƒë·ªãnh
   - B·∫Øt ch∆∞·ªõc c√°ch x∆∞ng h√¥ c·ªßa ng∆∞·ªùi d√πng n·∫øu h·ªç ch·ªß ƒë·ªông
   - Kh√¥ng thay ƒë·ªïi c√°ch x∆∞ng h√¥ gi·ªØa ch·ª´ng

---

**Ng·ªØ c·∫£nh tham kh·∫£o t·ª´ RAG:**  
{context}

**Y√™u c·∫ßu ƒë·∫ßu ra:**
- Ti·∫øng Vi·ªát t·ª± nhi√™n, g·∫ßn g≈©i
- Gi·ªçng ƒëi·ªáu ph√π h·ª£p v·ªõi t·ª´ng t√¨nh hu·ªëng
- LU√îN tham chi·∫øu ƒë·∫øn l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán khi ƒë∆∞·ª£c h·ªèi
- Tr√°nh c√¥ng th·ª©c, linh ho·∫°t trong c√°ch m·ªü ƒë·∫ßu
"""



# Prompt d√πng ƒë·ªÉ ph√¢n lo·∫°i c√¢u h·ªèi
ROUTING_PROMPT = PromptTemplate.from_template("""
B·∫°n l√† m·ªôt chuy√™n gia trong lƒ©nh v·ª±c t∆∞ v·∫•n t√¢m l√Ω v√† chƒÉm s√≥c s·ª©c kh·ªèe tinh th·∫ßn.

H√£y ph√¢n lo·∫°i c√¢u h·ªèi (ch·ªâ d·ª±a theo ph·∫ßn "C√¢u h·ªèi", kh√¥ng d·ª±a v√†o ph·∫ßn "C√¢u tr·∫£ l·ªùi tham kh·∫£o") d∆∞·ªõi ƒë√¢y d·ª±a tr√™n m·ª©c ƒë·ªô th√¥ng tin m√† ng∆∞·ªùi h·ªèi c·∫ßn:
- Tr·∫£ l·ªùi **"summary"** n·∫øu c√¢u h·ªèi qu√° ng·∫Øn g·ªçn ho·∫∑c y√™u c·∫ßu ƒë∆°n gi·∫£n, m·ªôt c√°i nh√¨n t·ªïng quan, ƒë·ªãnh h∆∞·ªõng, ho·∫∑c l·ªùi khuy√™n chung.
- Tr·∫£ l·ªùi **"full"** n·∫øu c√¢u h·ªèi y√™u c·∫ßu ph√¢n t√≠ch s√¢u, th√¥ng tin chi ti·∫øt, ho·∫∑c ph·∫£n h·ªìi mang t√≠nh c√° nh√¢n h√≥a cao.

Ch·ªâ tr·∫£ l·ªùi m·ªôt t·ª´ duy nh·∫•t: "summary" ho·∫∑c "full".

C√¢u h·ªèi: {question}
""")

def remove_links(text: str) -> str:
    url_pattern = r"https?://\S+|www\.\S+"
    return re.sub(url_pattern, "", text)


def format_documents(documents: List[Document]) -> str:
    texts = []
    for doc in documents:
        texts.append(doc.page_content)
        texts.append("---")

    return remove_links("\n".join(texts))


def create_chain(llm: BaseLanguageModel, retriever_full: VectorStoreRetriever, retriever_summary: VectorStoreRetriever) -> Runnable:
    # Step 1: LLM router chain
    routing_chain = ROUTING_PROMPT | llm | RunnableLambda(lambda output: output.content.strip().lower())

    # Step 2: dynamic retriever routing
    def get_retriever(routing_output: str) -> VectorStoreRetriever:
        return retriever_summary if routing_output == "summary" else retriever_full

    def retrieve_context(inputs: dict) -> List[Document]:
        question = inputs["question"]
        routing_output = routing_chain.invoke({"question": question})
        print(f"üß≠ Type: {routing_output}")
        retriever = get_retriever(routing_output)
        retriever_config = retriever.with_config({"run_name": f"context_retriever_{routing_output}"})
        return retriever_config.invoke(question)

    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", SYSTEM_PROMPT),
            MessagesPlaceholder("chat_history"),
            ("human", "C√¢u h·ªèi hi·ªán t·∫°i: {question}"),
        ]
    )

    chain = (
        RunnablePassthrough.assign(
            context=RunnableLambda(retrieve_context) | format_documents
        )
        | prompt
        | llm
    )

    return RunnableWithMessageHistory(
        chain,
        get_session_history,
        input_messages_key="question",
        history_messages_key="chat_history",
    ).with_config({"run_name": "chain_answer"})

async def ask_question(chain: Runnable, question: str, session_id: str):
    print(f"üîç ask_question called with session_id: {session_id}")
    
    # Debug: Ki·ªÉm tra session history tr∆∞·ªõc khi g·ªçi chain
    from ragbase.session_history import get_session_history
    history = get_session_history(session_id)
    print(f"üìö Current session history length: {len(history.messages)}")
    for i, msg in enumerate(history.messages[-3:]):  # Log 3 tin nh·∫Øn cu·ªëi
        role = "USER" if msg.__class__.__name__ == "HumanMessage" else "ASSISTANT"
        print(f"   Recent message {i+1} ({role}): {msg.content[:50]}...")
    
    async for event in chain.astream_events(
        {"question": question},
        config={
            "callbacks": [ConsoleCallbackHandler()] if Config.DEBUG else [],
            "configurable": {"session_id": session_id},
        },
        version="v2",
        include_names=[
            "context_retriever_full",
            "context_retriever_summary",
            "chain_answer",
        ],
    ):
        event_type = event["event"]
        if event_type == "on_retriever_end":
            yield event["data"]["output"]
        if event_type == "on_chain_stream":
            yield event["data"]["chunk"].content
